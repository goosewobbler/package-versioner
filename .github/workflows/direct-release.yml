name: Direct Manual Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
      release_version:
        description: 'Release type - patch, minor, or major'
        required: true
        default: 'minor'
        type: choice
        options: ['patch', 'minor', 'major']
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean

jobs:
  direct_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build
        
      - name: Test build output
        run: |
          echo "Checking dist directory content:"
          ls -la dist/
          echo "Checking index.js existence:"
          test -f dist/index.js && echo "index.js exists" || echo "index.js MISSING"
          echo "Checking package.json version:"
          jq -r '.version' package.json

      - name: Run versioning command
        id: version
        run: |
          # Construct command based on inputs
          BUMP_ARG="--bump ${{ inputs.release_version }}"
          DRY_RUN_ARG=""
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            DRY_RUN_ARG="--dry-run"
          fi
          
          echo "Running command: node ./dist/index.js --synced $BUMP_ARG $DRY_RUN_ARG"
          node ./dist/index.js --synced $BUMP_ARG $DRY_RUN_ARG
          
          # Store the new version
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Publish to NPM
        if: ${{ !inputs.dry_run }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create and push tag
        if: ${{ !inputs.dry_run }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          VERSION=$(jq -r '.version' package.json)
          TAG="v$VERSION"
          
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 